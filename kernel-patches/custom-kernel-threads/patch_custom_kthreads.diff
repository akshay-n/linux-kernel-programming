diff -rcNP linux-4.4.1/include/linux/my_header.h linux-4.4.1-custom/include/linux/my_header.h
*** linux-4.4.1/include/linux/my_header.h	1969-12-31 19:00:00.000000000 -0500
--- linux-4.4.1-custom/include/linux/my_header.h	2016-03-20 13:38:00.529721000 -0400
***************
*** 0 ****
--- 1,4 ----
+ void my_kernel_thread_create_1(void);
+ void my_kernel_thread_create_2(void);
+ void show_all_threads(void);
+ void stop_my_threads(void);
diff -rcNP linux-4.4.1/init/main.c linux-4.4.1-custom/init/main.c
*** linux-4.4.1/init/main.c	2016-01-31 14:29:37.000000000 -0500
--- linux-4.4.1-custom/init/main.c	2017-09-03 14:44:27.299273775 -0400
***************
*** 88,93 ****
--- 88,95 ----
  #include <asm/sections.h>
  #include <asm/cacheflush.h>
  
+ #include <linux/my_header.h>
+ 
  static int kernel_init(void *);
  
  extern void init_IRQ(void);
***************
*** 401,406 ****
--- 403,422 ----
  	kthreadd_task = find_task_by_pid_ns(pid, &init_pid_ns);
  	rcu_read_unlock();
  	complete(&kthreadd_done);
+ 	
+ 	show_all_threads();	
+ 	printk(KERN_INFO "Akshay: my_kernel_threads are about to be created");
+ 	my_kernel_thread_create_1();
+ 	my_kernel_thread_create_2();
+ 	printk(KERN_INFO "Akshay: my_kernel_threads have been created");
+ 	schedule();
+ 	schedule();
+ 	show_all_threads();
+ 	schedule();
+ 	schedule();
+ 	printk(KERN_INFO "Akshay: calling stop_my_threads");
+ 	stop_my_threads();
+ 	show_all_threads();
  
  	/*
  	 * The boot idle thread must execute schedule()
diff -rcNP linux-4.4.1/kernel/Makefile linux-4.4.1-custom/kernel/Makefile
*** linux-4.4.1/kernel/Makefile	2016-01-31 14:29:37.000000000 -0500
--- linux-4.4.1-custom/kernel/Makefile	2017-09-03 14:38:13.268686610 -0400
***************
*** 9,15 ****
  	    extable.o params.o \
  	    kthread.o sys_ni.o nsproxy.o \
  	    notifier.o ksysfs.o cred.o reboot.o \
! 	    async.o range.o smpboot.o
  
  obj-$(CONFIG_MULTIUSER) += groups.o
  
--- 9,16 ----
  	    extable.o params.o \
  	    kthread.o sys_ni.o nsproxy.o \
  	    notifier.o ksysfs.o cred.o reboot.o \
! 	    async.o range.o smpboot.o \
! 	    my_hotplug_th.o my_kthreads.o
  
  obj-$(CONFIG_MULTIUSER) += groups.o
  
diff -rcNP linux-4.4.1/kernel/my_hotplug_th.c linux-4.4.1-custom/kernel/my_hotplug_th.c
*** linux-4.4.1/kernel/my_hotplug_th.c	1969-12-31 19:00:00.000000000 -0500
--- linux-4.4.1-custom/kernel/my_hotplug_th.c	2016-03-20 03:00:02.043696000 -0400
***************
*** 0 ****
--- 1,34 ----
+ #include <linux/kernel_stat.h>
+ #include <linux/smpboot.h>
+ #include <linux/delay.h>
+ 
+ DEFINE_PER_CPU(struct task_struct *, my_hotplugd);
+ 
+ int flag0=1;
+ int flag1=1;
+ 
+ static void run_my_hotplugd(unsigned int cpu) {	
+ 	printk(KERN_NOTICE "Akshay: my_hotplugd/%d\n", cpu);
+         msleep(10000);
+ }
+ 
+ static int my_hotplugd_should_run(unsigned int cpu){
+ 	//return local_softirq_pending();
+ 	if(cpu == 0) {if(flag0) {flag0--; return 1;}}
+ 	if(cpu == 1) {if(flag1) {flag1--; return 1;}}
+ 	return 0;
+ }
+ 
+ static struct smp_hotplug_thread my_hotplugd_threads = {
+         .store                  = &my_hotplugd,
+ 	.thread_should_run	= my_hotplugd_should_run,
+         .thread_fn              = run_my_hotplugd,
+         .thread_comm            = "my_hotplugd/%u",
+ };
+ 
+ static __init int spawn_my_hotplug_threads(void){
+          BUG_ON(smpboot_register_percpu_thread(&my_hotplugd_threads));
+          return 0;
+ }
+ 
+ early_initcall(spawn_my_hotplug_threads);
diff -rcNP linux-4.4.1/kernel/my_kthreads.c linux-4.4.1-custom/kernel/my_kthreads.c
*** linux-4.4.1/kernel/my_kthreads.c	1969-12-31 19:00:00.000000000 -0500
--- linux-4.4.1-custom/kernel/my_kthreads.c	2016-03-20 13:38:55.743590000 -0400
***************
*** 0 ****
--- 1,84 ----
+ #include <linux/kernel.h>
+ #include <linux/kthread.h>
+ #include <linux/sched.h>
+ #include <linux/list.h>
+ #include <linux/my_header.h>
+ #include <linux/slab.h>
+ 
+ #define CLONE_KERNEL    (CLONE_FS | CLONE_FILES | CLONE_SIGHAND)
+ 
+ static int mypid1, mypid2;
+ 
+ int mythread_1(void *unused){
+   struct task_struct *curtask = current;
+   strcpy(curtask->comm, "akshay_1");
+   set_task_state(curtask, TASK_RUNNING);
+   printk(KERN_NOTICE "Akshay: mythread_1 is about to be scheduled.\n");
+   schedule();
+   printk(KERN_NOTICE "Akshay: mythread_1 is now scheduled.\n");
+   do_exit(0);
+   return 0;
+ }
+ 
+ int mythread_2(void *unused){
+   struct task_struct *curtask = current;
+   strcpy(curtask->comm, "akshay_2");
+   set_task_state(curtask, TASK_RUNNING);
+   printk(KERN_NOTICE "Akshay: mythread_2 is about to be scheduled.\n");
+   schedule();
+   printk(KERN_NOTICE "Akshay: mythread_2 is now scheduled.\n");
+   do_exit(0);
+  return 0;
+ }
+ 
+ 
+ void my_kernel_thread_create_1(void){
+   printk(KERN_NOTICE "Akshay: Calling kernel_thread(my_ker_thd_1)\n");
+   mypid1 = kernel_thread(mythread_1, NULL, CLONE_KERNEL);
+   printk(KERN_NOTICE "Akshay: mythread_1 pid: %d\n", mypid1);
+ }
+ 
+ void my_kernel_thread_create_2(void){
+   printk(KERN_NOTICE "Akshay: Calling kernel_thread(my_ker_thd_2)\n");
+   mypid2 = kernel_thread(mythread_2, NULL, CLONE_KERNEL);
+   printk(KERN_NOTICE "Akshay: mythread_2 pid: %d\n", mypid2);
+ }
+ 
+ void show_all_threads(){
+   struct task_struct *p;
+   struct tm tm1, tm2;
+   struct timespec ts1,ts2;
+   
+   getboottime(&ts2);
+   ts2.tv_sec = ts2.tv_sec - (240*60); //adjust for timezone difference
+   
+   printk(KERN_INFO "UID\t PID\tPPID\tSTIME\t    TIME CMD\n");
+   for_each_process(p){
+   if(p){
+   	ts1 = ns_to_timespec(p->start_time);
+   	time_to_tm(ts1.tv_sec, 0, &tm1);
+   	time_to_tm(ts2.tv_sec, ts1.tv_sec, &tm2);
+ 	printk(KERN_INFO "%d\t%4d\t%4d\t%02d:%02d\t%02d:%02d:%02d [%s]\n", 
+ 			p->real_cred->uid.val,
+ 			p->pid,
+ 			p->parent->pid,
+ 			tm2.tm_hour,
+ 			tm2.tm_min,
+ 			tm1.tm_hour,
+ 			tm1.tm_min,
+ 			tm1.tm_sec,
+ 			p->comm
+ 		);
+   	}
+   }
+ }
+ 
+ void stop_my_threads(){
+ 	struct task_struct *p;
+ 	for_each_process(p){
+ 		if(p && ((p->pid == mypid1)||(p->pid == mypid2))){
+ 		printk(KERN_INFO "Akshay: Stoping kthread with pid: %d\n", p->pid);
+ 		release_task(p);
+ 		}
+ 	}
+ }
